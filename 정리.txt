1.
select a.emp_name, a.salary, b.department_id, b.department_name
from employees a, departments b
where a.DEPARTMENT_ID = b.department_id;

2.
select department_name
from employees, DEPARTMENTS
where emp_name = 'Pat Fay';

3. -안됨-
select employee_id || emp_name|| '의 상관은' ||
 manager_id ||case employee_id when manager_id then emp_name end||'입니다.'
from employees 
ORDER by EMPLOYEE_ID;

4.

5.

6.
select a.emp_name, b.department_name, a.salary, d.job_title
from employees a, DEPARTMENTS b,JOB_HISTORY c,jobs d
where c.job_id in (select f.job_id from employees e, jobs f where e.emp_name = 'Pat Fay') 
;

7.
select employees.EMPLOYEE_ID ,emp_name, HIRE_DATE, salary
from employees , DEPARTMENTS b
where b.DEPARTMENT_id in (select f.DEPARTMENT_id 
from employees e, DEPARTMENTS f where e.emp_name = 'Den Raphaely') 
;

8.
select a.EMPLOYEE_ID ,a.emp_name, b.department_name ,a.HIRE_DATE, a.salary
from employees a, DEPARTMENTS b
group by EMPLOYEE_ID ,emp_name, department_name ,HIRE_DATE, salary
HAVING salary >= avg(salary);

9.
select a.EMPLOYEE_ID , a.emp_name, b.department_name , a.salary
from employees a , DEPARTMENTS b
where b.department_id = '50'
order by salary desc;

10.
select EMPLOYEE_ID , emp_name, salary
from employees 
where salary in (select salary 
from employees where EMP_NAME = 'Lex De Haan' or EMP_NAME ='Douglas Grant')
;

11.
select EMPLOYEE_ID ,emp_name, salary
from employees 
where salary >= (select MAX(salary) from employees where department_id = 50);

12.
select EMPLOYEE_ID ,emp_name, salary
from employees 
where salary <= (select MIN(salary) from employees where department_id = 50);

13.
select emp_name, salary, commission_pct , salary + (salary*commission_pct) HAP
from EMPLOYEES
where commission_pct is not null
GROUP by emp_name, salary, commission_pct
order by HAP desc
;

14.

select emp_name, salary ,(salary * 0.13) bounus
from employees 
where department_id = 50;

15.
select emp_name,department_id, salary, ((salary * 12) + (SALARY * 0.5 )) year_of_money 
from EMPLOYEES
where department_id = 30 
GROUP by emp_name,department_id, salary
;

16.
select emp_name, salary, round(salary / 12 / 5 ,1) time_to_pay 
from EMPLOYEES
where department_id = 20 
GROUP by emp_name, salary 
;

17.
select emp_name, salary, 
case when salary between 1500 and 3000 then ROUND(salary*0.15, 2) end 
Dining_together_money
from employees;

18.
select emp_name, salary, case when salary > 2000 
then ROUND(salary*0.15)end Dining_together_money
from employees;

19.
select department_id, emp_name, hire_date , (sysdate) today
 ,ROUND(sysdate - hire_date) work_day, ROUND((sysdate - hire_date) / 365) work_year
, ROUND((sysdate - hire_date)/53)work_month, ROUND((sysdate - hire_date)/12) work_week
from employees;

20.
select emp_name,salary,(salary * 0.9)real_money
from employees
order by real_money desc;

21.
select emp_name, hire_date, (hire_date + '90') sdad, salary
from employees;

22.
select substr(Lower(emp_name),0,3)
from employees
where length(emp_name) > 6;

23.

select avg(salary) , max(salary), min(salary), count(salary)
from employees
where department_id = 50;

24.

select department_id , avg(salary) , max(salary), min(salary), count(salary)
from employees
group by department_id;

25.

select a.department_id ,b.job_title,count(a.job_id)
from employees a , JOBS b
group by department_id, job_title;

26.
select a.department_id ,b.job_title,count(a.job_id)
from employees a , JOBS b
group by department_id, job_title
having count(a.job_id) > 4;

27.

select department_id , avg(salary) , max(salary), min(salary), count(salary)
from employees
group by department_id
order by AVG(salary) desc;

28.

create table job_info AS
SELECT a.employee_id, a.emp_name , b.job_id , b.job_title
from employees a, jobs b;

29.

create table employees1 as
select employee_id, emp_name, salary, commission_pct
from EMPLOYEES
where commission_pct > 0 ;

create table emp_CPN as
select employee_id, emp_name, salary, commission_pct
from EMPLOYEES
where commission_pct = null ;

MERGE into employees1 e
using (select employee_id, 
emp_name, salary, commission_pct from emp_CPN) c
on (e.employee_id = c.employee_id)
when matched then
update set e.commission_pct = c.commission_pct * 2;

30.

DELETE EMPLOYEES
where salary <= 3000;

31.

DELETE EMPLOYEES
where salary <= 3000;
rollback;

32.

insert into DEPARTMENTS 
(DEPARTMENT_ID,DEPARTMENT_NAME,PARENT_ID,MANAGER_ID,CREATE_DATE,UPDATE_DATE)
VALUES (280,'자제관리부',30,114,sysdate,sysdate);

33.

DELETE EMPLOYEES
where (sysdate - hire_date) > 20;

34.

update EMPLOYEES
set SALARY = SALARY * 1.1
where ROUND((sysdate - hire_date) / 365) > 20;

35.

update EMPLOYEES
set SALARY = SALARY * 1.1
where ROUND((sysdate - hire_date) / 365) < 3 ;

36.

create index ename_inx
on employees(emp_name);

37.

create index phone_num_inx
on employees(phone_number);

38.

CREATE SEQUENCE to_9999
INCREMENT by 2
start with 1 
maxvalue 9999
MINVALUE 1
cycle;

39.

create or replace view dept_sal as
select d.department_name, sum(a.salary) sum_s, max(a.salary) max_s, min(a.salary) min_s, avg(a.salary) avg_s, count(a.employee_id) count_e
from DEPARTMENTS d, EMPLOYEES a
where d.DEPARTMENT_ID = a.DEPARTMENT_ID
GROUP BY department_NAME;

40.

create or replace view job_sal as
select d.JOB_TITLE, sum(a.salary) sum_s, max(a.salary) max_s, min(a.salary) min_s, avg(a.salary) avg_s, count(a.employee_id) count_e
from JOBS d, EMPLOYEES a
where d.job_ID = a.job_ID
GROUP BY d.JOB_TITLE;

참고용
2장

테이블 생성 : create table 이름( 컬럼 데이터타입 null이나 not null);
뷰 생성       : create or replace view 이름 as select 문장;
인덱스 생성 :create index 이름 on 테이블이름(컬럼);
시노님 생성:create or replace synonym 이름 for 객체명;
시퀸스 생성:create sequence 이름 increment by 증감숫자 start with 시작숫자 minvalue 최소
maxvalue 최대 cycle 반복 cache 메모리에 미리 할당

변경: alter table 테이블명 renamecolumn 변경전 컬럼 이름 to 변경후 이름; -이름 바꾸기
       alter table 테이블명 modify 컬럼명 데이터타입;  -데이터 타입변경
       alter table 테이블명 add 컬럼명 데이터타입; - 컬럼 추가
       alter table 테이블명 drop column 컬럼명; -컬럼 삭제

테이블 복사:create table 테이블명 as select 컬럼들 from 복사할 테이블; 

삭제: drop 테이블,뷰 등 대부분 이름;

3장

select 컬럼
from 테이블
where 조건
group by 컬럼
having 조건
order by 정렬 (ASC : 오름차순 DESC : 내림차순)

insert: insert into 테이블명 (컬럼1,컬럼2) values (값1,값2) -데이터를 집어넣음
         insert into 테이블명 values (값1,값2) 생략버전
         insert into 테이블명 (컬럼1, 컬럼2) select ~;

update: update 테이블명 set 컬럼1 = 변경값 where 조건; -기존 데이터를 수정

merge: merge into 테이블명 using 사용될 데이터 on (update될 조건)  ※ 포기하는게 정신,시간 상 이로움
          when matched then set 컬럼1 = 값                 -update와 비슷한 구조
          where update 조건 delet where update_delete 조건
          when not matched then insert (컬럼1,컬럼2) values (값1,값2) - insert와 비슷
          where insert 조건; 여기까지가 
즉, 비교하여 이미 있으면 update 없으면 insert

delete: delete 테이블 where delete 조건; -데이터 삭제

commit - 마지막으로 반영 -rollback불가
rollback - 이전 상태로 되돌림

|| - 두 문자 붙임

case: case when 조건 then 값 else 값 end -when다음의 조건이 참 일때 값

ANY(1000, 2000, 3000) -or 1개이상 만족시
ALL(2000,1000,3000)-and 모두 만족시 
SOME은 ANY와 같다

between 1000 and 2000 1000과 2000 포함

in : any와 비슷하다만, any는>,<,>=같은 연산자 사용 가능 in은 불가

exists: in과 비슷하나 서브쿼리(select나 이런거로 쿼리 만든거)만 사용 가능하고
 조인(6장 a.employee_id = b.employee_id)가 들어있어야 됨

like : like 'a%' a로 시작되는 것, 문자열에서 패턴을 검색할때 사용 (%는 뒤에 아무거나 상관x) (_는 한글자만 비교)

4장 

round(숫자,소숫점 자리) -반올림
trunc(숫자,소숫점 자리) -내림
power(숫자1,숫자2) 숫자1를 숫자2제곱
mod(숫자1,숫자2) 숫자1를 숫자2로 나눈 나머지값

initcap() 첫문자 대문자
lower() 모두 소문자
upper() 모두 대문자
concat('문자1','문자2') ||와 같이 문자열을 붙여준다
substr(문자,시작위치(숫자),시작위치에서 이동할 거리(숫자))

ltrim('abcd','a') abcd의 왼쪽에 있는 a를 제거 후 반환

lpad(111-1111, 12 , '(02)') 111-1111은 -까지 포함하여 8자리 (02)는 4자리 총 12자리

replace('위 위 아래 아래 좌 우 좌 우 B A', '위' , '아래') ->아래 아래 아래 아래 좌 우 좌 우 B A 
문자열 비교 + 공백 제거 가능
translate('간장공장 공장장은 강공장장이고 공공장 공장장은 장공장장이다.','공장','아에') 
          ->간에아에 아에에은 강아에에이고 아아에 아에에은 에아에에이다. 
replace와 비슷하나 문자열이 아닌 한 글자씩 비교

instr(문자열,찾을 문자열,시작 위치, 몇 번째 일치인지) - 위치 반환
length() -문자열 개수

sysdate 현재일자

add_month(날짜, 더할 개월 수)

month_between(날짜1,날짜2) 두 날짜 사의의 개월 수

last_day (날짜) 해당 월의 마지막 일자

round(날짜,'month') 달을 반올림 1월 10일 -> 1월 1일 1월 16일-> 2월 1일
trunc() 내림

next_day(날짜, '일요일') - 해당 주 일요일로 요일 변경

to_char(123456,'999.999')-> 123.456 뒤에 오는 것 '999.99'- 숫자 'YYYY' -연도
to_number()
to_date(20191029,'YYYY-MM-DD')

nvl (문자1, 문자2) - 문자1이 null이면 문자2 

coalesce (표현식,컬럼) - 표현식이 null이면 컬럼

lnnvl(조건) - false나 unknown이면 true 아니면 false

nullif(뭐1,뭐2) -뭐1과 뭐2를 비교하여 같으면 null 아니면 뭐1 

greatest(여러가지 숫자) - 이중 가장 큰 값
least(여러가지 숫자) - 이중 가장 작은값

decode(뭐1, 비교할꺼1, 결과1, 비교할꺼2, 결과2, 아무것도 아니면 나오는거)

5장

그룹에서 쓸수있는것

count() - 결과 수
sum() - 전체 합
avg()- 평균
min(),max() - 최소,최대
variance(),stddev() - 분산,표준편차

rollup(뭐1,뭐2) - 뭐1,뭐2,(뭐1+뭐2)
cube(뭐1,뭐2)  - (뭐1+뭐2),뭐1,뭐2

union - 합집합 
union all -합집합 + 중복된것도 모두 조회
intersect - 교집합
minus - 차집합

grouping sets (뭐1,뭐2,뭐3) - 뭐1 union all 뭐2 union all 뭐3

6장

동등조인 where a.emp_name = b.emp_name 
세미조인 employees a where exists(select * from department b where a.department_id = b.department_id)
            employees a where a.department in (select * from department b)
 - b에 존재하는 a의 데이터 추출
안티조인 -세미조인의 반대 not exists나 not in 을 사용
셀프조인 - 동일한 테이블에서 조인 
외부조인 - (+)를 조인 조건에 없는 데이터를 사용할 테이블의 컬럼에 모두 붙인다.
카타시안 조인 - where에 조인조건이 없는 조인, 그러므로 결과의 수는 테이블1의 데이터수 * 테이블2의 데이터수

ansi 조인 - select a.컬럼, b.컬럼 from 테이블 a inner join 테이블 b on(조인조건) where~~~
ansi 외부조인 - select a.컬럼, b.컬럼 from 테이블 a 여기까지는 같다. left또는 right join 테이블b on (조인조건) where~~~
cross조인 - select a.컬럼, b.컬럼 from 테이블 a cross join 테이블 b -카타시안조인처럼 join조건X
fullout 조인 - 두 테이블 모두 외부조인처럼 사용 select a.컬럼, b.컬럼 from 테이블 a full outer join 테이블b on (조인조건)

서브쿼리 - 쿼리는 지금 만들고 있는 문장들 집합, 쿼리를 보조
연관성 없는 서브쿼리 - 메인쿼리랑 조인조건 X
연관성 있는 서브쿼리 - 메인쿼리랑 조인조건 O